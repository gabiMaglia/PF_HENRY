//////AUTH ENDPOINTS

useRouter.post('account/signin', signInHandler)                    espera lo mismo que post user|
useRouter.get('account/confirm/:token', confirmAccountHandler)     espera token de confirmacion |   


login          'localhost:3001/account/login' /  espera => {"username": "gabrielsk" "password": "lallala"} retorna {
    
    "tokenSession": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIwYTM1YmNkNy04MGEzLTQyNjctYjc2Yy1lZGRmODY0OWVhNzIiLCJ1c2VybmFtZSI6ImdhYnJpZWxzayIsImlhdCI6MTcwMjAxMjUyOCwiZXhwIjoxNzAyMDE2MTI4fQ.GT2hINxFUPhgA86YWjAfm9lu9sO3eImM30WWB_Bw2R4",
    "userId": "0a35bcd7-80a3-4267-b76c-eddf8649ea72",
    "login": true

}
Luego hay que mandar ese token en los headers de la peticion con tipo de autorizacion
Bearer Token
//MAILING ENDPOINTS

Send support mail http://localhost:3001/mailer/support_mail expects {name, phone, eamail, content}

//////USER ENDPOINTS

Get all users       "localhost:3001/user"      Trae todos los usuaiors sin direccion ni credenciales ni roles
Get user by id      "localhost:3001/user/:id"   Trae un usuaio completo
Post user           "localhost:3001/user"      Crea usuario nuevo
Put user            "localhost:3001/user/:id"   Modifica usuario por id
Delete user by id   "localhost:3001/user/:id"   Elimina usuario por id

/////USER_ROLES ENDPOINTS

Get all Roles       "localhost:3001/user_role"                        Trae todos los Roles disponibles 
Get users by Roles  "localhost:3001/user_role/by_role/"role"          Trae todos los usuarios con un determinado Rol 
Create new Role     "localhost:3001/user_role/create"                 Edita Role de un usuario  / expects { role_name : "roleName"}

/////USER_CREDENTIALS ENDPOINTS

Get user cred by  id  "localhost:3001/user_credentials/:id"  Trae las credenciales de un usuario
Edit user cred by id "localhost:3001/user_credentials/:id"   Edita las credenciales de un usuario / expects { username : "username", password : "password"}

/////////////////////////////////////////////////////////////
{POST USER EXPECTED OBJECT}
{
    "name" : "gabriel" ,
    "surname": "fdsafa",
    "birthdate":"16/03/1987",
    "dni": "327258971",
    "email": "gab.madsfdsglia@gmail.com",
    "telephone": "341587398",
    "image"   : "",
    "role":"admin",
    "userAddress" : {
        "country": "Argentina", 
        "state" : "Santa Fe", 
        "city": "Rosario",
        "street": "Arenales", 
        "number": 329,
        "zipCode": 2152
    },
    "userCredentials": {
        "username" : "gabriefdslsk",
        "password" : "lala1234"   
    }
}
//////////////////////////////////////////////////////////////////////////////////////
//SESSION ENDPOINTS
GET LOGOUT localhost:3001/account/logout //mandar token por auth header
GET REFRESHTOKEN localhost:3001/account/refresh //mandar token por auth header
GET CHECKTOKENSTATUS localhost:3001/account/jwt-check //mandar token por auth header
//////////////////////////////////////////////////////////////////////////////////////

Edit user espera el mismo objeto salvo las credenciales, cualquier datos e puede obviar,
si no llega en la query sera autocompletado por la info del objeto alojado en la base de datos

Ruta de servicios

a√±adir un modelo a servicio tecnico "localhost:3001/service" se completaria por medio de un form
actualizar un status de servicio tecnico es una peticion put a "localhost:3001/service/:id(debe ser el id del status)" y 
dependiendo de lo que se le ponga como field va a actualizar uno o otro estado. 
para traer todos los servicios es una request get a "localhost:3001/service"
para traer por id es a "localhost:3001/service/:id(debe ser el id del servicio)"

{POST SERVICE EXPECTED OBJECT}

{
 "product_model":"samsung a23",
    "product_income_date": "6/12/2023",
    "user_diagnosis":"el equipo no enciende",
    "clientId":"fc628cb4-f316-4ffe-8da6-6cc263faf1ec",
    "technicianId":"21c3ef9e-e8ba-4528-b605-b0ba2ead3158"
	
}
{PUT SERVICE STATUS EXPECTED OBJECT}
{
"field":"final_diagnosis",
	"value":"se modifico la bateria"
}

en caso de querer cambiar el confirm repair o finish repair
{
"field":"confirm_repair",
	"value":true
}


//////USER ENDPOINTS

Get all product       "localhost:3001/product/"      Trae todos los product 
Get product by id     "localhost:3001/product/:id"   Trae un product completo con brand y categorias asociadas
Post product           "localhost:3001/product/"      Crea product nuevo
Put product            "localhost:3001/product/:id"   Modifica product por id 
Delete product by id   "localhost:3001/product/:id"   Elimina product por id

///FILTRADOS

 getBrandWithProductsHandler     "localhost:3001/brand/filter/:name"    trae a todos los productos que pertenezcan a esa brand. ej: "localhost:3001/brand/filter/ASSER"


{POST PRODUCT EXPECTED OBJECT}

{
  "name": "Laptop I2000",
  "price": "13200.00",
  "description": "holis que se yo ",
  "warranty": "2028-01-11",
  "is_deleted": "false",
  "soldCount": "88",
  "stock": "345",
  "categoryName": ["computadora", "laptop"],
  "brandName": "Lenovo",
  "images": ["imffa0.png", "fff.png"]  //pueden ser url de internet
}


{PUT PRODUCT EXPECTED OBJECT}


{
    "propiedad": "nuevoValor"
    "otraPropiedad": "nuevoValor"
} 

No es necesario reescribir todas las propiedades